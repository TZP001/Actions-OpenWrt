name: Register Telegram App

on:
  workflow_dispatch:

jobs:
  register-telegram-app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Wait for phone number in file
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO: 'TZP001/jdpro'
        PHONE_NUMBER_FILE: 'jd_ddly.js'
      run: |
        echo "Waiting for phone number in file..."
        while true; do
          # Use GitHub API to fetch the file content
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3.raw" \
            "https://api.github.com/repos/$REPO/contents/$PHONE_NUMBER_FILE?$(date +%s)")
          echo "Response content: $RESPONSE"
          PHONE_NUMBER=$(echo "$RESPONSE")
          if [[ "$PHONE_NUMBER" != "0" && -n "$PHONE_NUMBER" ]]; then
            echo "Phone number received: $PHONE_NUMBER"
            echo "PHONE_NUMBER=${PHONE_NUMBER}" >> $GITHUB_ENV
            break
          else
            echo "Phone number not found or file content is '0'. Retrying in 10 seconds..."
            sleep 10
          fi
        done

    - name: Send login request and get RANDOM_HASH
      env:
        PHONE_NUMBER: ${{ env.PHONE_NUMBER }}
      run: |
        python - <<EOF
        import requests
        import os

        phone_number = os.environ['PHONE_NUMBER']

        # Step 1: Send login request to Telegram
        response = requests.post(
            'https://my.telegram.org/auth/send_password',
            data={'phone': phone_number}
        )
        print("Login request response:", response.text)  # Print response content
        if response.status_code != 200:
            raise Exception('Failed to send login request')
        random_hash = response.json()['random_hash']

        # Save random_hash to GitHub environment for later use
        with open(os.environ['GITHUB_ENV'], 'a') as f:
            f.write(f'RANDOM_HASH={random_hash}\n')

        print('Login request sent. Check your Telegram for the login code.')
        print(f'RANDOM_HASH: {random_hash}')
        EOF

    - name: Wait for login code in file
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO: 'TZP001/jdpro'
        LOGIN_CODE_FILE: 'jd_3cy.js'
      run: |
        echo "Waiting for login code in file..."
        while true; do
          # Use GitHub API to fetch the file content
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3.raw" \
            "https://api.github.com/repos/$REPO/contents/$LOGIN_CODE_FILE?$(date +%s)")
          echo "Response content: $RESPONSE"
          LOGIN_CODE=$(echo "$RESPONSE")
          if [[ "$LOGIN_CODE" != "0" && -n "$LOGIN_CODE" ]]; then
            echo "Login code received: $LOGIN_CODE"
            echo "LOGIN_CODE=${LOGIN_CODE}" >> $GITHUB_ENV
            break
          else
            echo "Login code not found or file content is '0'. Retrying in 10 seconds..."
            sleep 10
          fi
        done

    - name: Login and get session cookies
      env:
        PHONE_NUMBER: ${{ env.PHONE_NUMBER }}
        RANDOM_HASH: ${{ env.RANDOM_HASH }}
        LOGIN_CODE: ${{ env.LOGIN_CODE }}
      run: |
        python - <<EOF
        import requests
        import os

        phone_number = os.environ['PHONE_NUMBER']
        random_hash = os.environ['RANDOM_HASH']
        login_code = os.environ['LOGIN_CODE']

        # Step 2: Complete login with the login code
        response = requests.post(
            'https://my.telegram.org/auth/login',
            data={
                'phone': phone_number,
                'random_hash': random_hash,
                'password': login_code
            }
        )
        print("Login response:", response.text)  # Print response content
        if response.status_code != 200:
            raise Exception('Failed to login')

        # Save cookies to environment variables
        cookies = response.cookies
        with open(os.environ['GITHUB_ENV'], 'a') as f:
            f.write(f'STEL_TOKEN={cookies.get("stel_token")}\n')

        print("Login successful. Cookies saved.")
        EOF

    - name: Extract hash from apps page
      env:
        STEL_TOKEN: ${{ env.STEL_TOKEN }}
      run: |
        python - <<EOF
        import requests
        from bs4 import BeautifulSoup
        import os

        cookies = {
            'stel_token': os.environ['STEL_TOKEN']
        }

        # Fetch the apps page
        response = requests.get('https://my.telegram.org/apps', cookies=cookies)
        if response.status_code != 200:
            raise Exception('Failed to fetch apps page')

        # Parse the page content
        soup = BeautifulSoup(response.text, 'html.parser')

        # Extract the hash value
        hash_input = soup.find('input', {'name': 'hash'})
        if hash_input:
            hash_value = hash_input['value']
            print(f"Hash value: {hash_value}")
            with open(os.environ['GITHUB_ENV'], 'a') as f:
                f.write(f'HASH={hash_value}\n')
        else:
            raise Exception('Hash not found!')
        EOF

    - name: Create Telegram application
      env:
        STEL_TOKEN: ${{ env.STEL_TOKEN }}
        HASH: ${{ env.HASH }}
      run: |
        python - <<EOF
        import requests
        import os

        cookies = {
            'stel_token': os.environ['STEL_TOKEN']
        }

        data = {
            'hash': os.environ['HASH'],
            'app_title': 'MyTelegramApp',
            'app_shortname': 'myapp',
            'app_url': '',
            'app_platform': 'web',
            'app_desc': 'My Telegram App Description'
        }

        # Create the application
        response = requests.post(
            'https://my.telegram.org/apps/create',
            data=data,
            cookies=cookies
        )
        print("Create application response:", response.text)  # Print response content
        if response.status_code != 200:
            raise Exception('Failed to create application')
        print("Application created successfully!")
        EOF

    - name: Extract API ID and API Hash
      env:
        STEL_TOKEN: ${{ env.STEL_TOKEN }}
      run: |
        python - <<EOF
        import requests
        from bs4 import BeautifulSoup
        import os

        cookies = {
            'stel_token': os.environ['STEL_TOKEN']
        }

        # Fetch the apps page
        response = requests.get('https://my.telegram.org/apps', cookies=cookies)
        if response.status_code != 200:
            raise Exception('Failed to fetch apps page')

        # Parse the page content
        soup = BeautifulSoup(response.text, 'html.parser')

        # Extract API ID and API Hash
        api_id = soup.find('span', {'class': 'form-control input-xlarge uneditable-input'}).text.strip()
        api_hash = soup.find('input', {'name': 'app_hash'})['value']

        print(f"API ID: {api_id}")
        print(f"API Hash: {api_hash}")

        # Save API ID and API Hash to a file
        with open('api_credentials.txt', 'w') as f:
            f.write(f'API_ID={api_id}\n')
            f.write(f'API_HASH={api_hash}\n')
        EOF

    - name: Upload API credentials as artifact
      uses: actions/upload-artifact@v4
      with:
        name: api-credentials
        path: api_credentials.txt
